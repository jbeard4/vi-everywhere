<scxml 
	xmlns="http://www.w3.org/2005/07/scxml" 
	xmlns:c="http://commons.apache.org/scxml-js"
	xmlns:vi="urn:vi"
	profile="ecmascript" 
	version="1.0" 
	name="viBehaviour" 
	initial="initial_default">

	<datamodel>
		<data id="controller"/>
		<data id="repeatInput" expr="''"/>
	</datamodel>

	<script><![CDATA[
		function updateSelection(){
			return In(visual_or_select_mode);
		}
	]]></script>

	<state id="initial_default">
		<transition event="init" target="main">
			<assign location="controller" expr="_event.data"/>	
		</transition>
	</state>

	<parallel id="main">

		<state id="in_mode" initial="normal_mode">

			<state id="normal_mode">

				<onentry>
					<script>
						controller.makeCursorFat();
						controller.updateModeText("-- NORMAL --")
					</script>
				</onentry>

				<transition event="P_keypress">
					<script>
						controller.putTextFromRegisterBeforeCursor();
					</script>
				</transition>

				<transition event="p_keypress">
					<script>
						controller.putTextFromRegisterAfterCursor();
					</script>
				</transition>

				<transition event="colon_keypress" target="command_mode"/>
					
				<transition event="v_keypress" target="visual_character"/>
				<transition event="V_keypress" target="visual_line"/>
				<transition event="ctrl_v_keypress" target="visual_block"/>


				<!--
				<transition event="G" target="normal_mode">
					<script>	
						controller.moveToLastLineOfDocument()
					</script>
				</transition>

				<transition event="g" target="after_g"/>

				-->

				<transition event="i_keypress" target="insert_mode"/>

				<transition event="a_keypress" target="insert_mode">
					<script>
						controller.moveRight(true);
					</script>
				</transition>

			</state>

			<state id="visual_or_select_mode" initial="visual_mode">

				<onentry>
					<script>
						controller.makeCursorFat();
						controller.startSelection(); 
					</script>
				</onentry>

				<onexit>
					<script>
						controller.clearSelection(); 
					</script>
				</onexit>
		
				<transition event="esc_keypress" target="normal_mode"/>

				<state id="select_mode" initial="select_character">

					<transition event="*" target="insert_mode"
						cond="_event.data.charCode !== 0">
						<script>
							controller.replaceSelectedTextIntoRegister(_event.data.charCode);  
						</script>
					</transition>

					<state id="select_line">
						<onentry>
							<script>
								controller.updateModeText("-- SELECT LINE --")
								controller.setSelectionMode(controller.SELECTION_MODE.LINE);
							</script>
						</onentry>
						<transition event="ctrl_v_keypress" target="select_block"/>
						<transition event="v_keypress" target="select_character"/>

						<transition event="ctrl_g_keypress" target="visual_line" />
					</state>

					<state id="select_block">
						<onentry>
							<script>
								controller.updateModeText("-- SELECT BLOCK --")
								controller.setSelectionMode(controller.SELECTION_MODE.BLOCK);
							</script>
						</onentry>
						<transition event="v_keypress" target="select_character"/>
						<transition event="V_keypress" target="select_line"/>

						<transition event="ctrl_g_keypress" target="visual_block" />
					</state>

					<state id="select_character">
						<onentry>
							<script>
								controller.updateModeText("-- SELECT --")
								controller.setSelectionMode(controller.SELECTION_MODE.CHARACTER);
							</script>
						</onentry>
						<transition event="ctrl_v_keypress" target="select_block"/>
						<transition event="V_keypress" target="select_line"/>

						<transition event="ctrl_g_keypress" target="visual_character" />
					</state>
				</state>

				<state id="visual_mode" initial="visual_character">

					<transition event="yank_executed" target="normal_mode" />

					<transition event="x_keypress" target="normal_mode">
						<script>
							controller.deleteSelectedTextIntoRegister();  
						</script>
					</transition>

					<transition event="d_keypress" target="normal_mode">
						<script>
							controller.deleteSelectedTextIntoRegister();  
						</script>
					</transition>

					<transition event="c_keypress" target="insert_mode">
						<script>
							controller.deleteSelectedTextIntoRegister();  
						</script>
					</transition>

					<!-- TODO: figure out what kind of API we want for selection stuff -->
					<state id="visual_line">
						<onentry>
							<script>
								controller.updateModeText("-- VISUAL LINE --")
								controller.setSelectionMode(controller.SELECTION_MODE.LINE);
							</script>
						</onentry>
						<transition event="ctrl_v_keypress" target="visual_block"/>
						<transition event="v_keypress" target="visual_character"/>

						<transition event="ctrl_g_keypress" target="select_line" />
					</state>

					<state id="visual_block">
						<onentry>
							<script>
								controller.updateModeText("-- VISUAL BLOCK --")
								controller.setSelectionMode(controller.SELECTION_MODE.BLOCK);
							</script>
						</onentry>
						<transition event="v_keypress" target="visual_character"/>
						<transition event="V_keypress" target="visual_line"/>

						<transition event="ctrl_g_keypress" target="select_block" />
					</state>

					<state id="visual_character">
						<onentry>
							<script>
								controller.updateModeText("-- VISUAL --")
								controller.setSelectionMode(controller.SELECTION_MODE.CHARACTER);
							</script>
						</onentry>
						<transition event="ctrl_v_keypress" target="visual_block"/>
						<transition event="V_keypress" target="visual_line"/>

						<transition event="ctrl_g_keypress" target="select_character" />
					</state>

				</state>
			</state>


			<state id="insert_mode">
				<onentry>
					<script>
						controller.makeCursorThin()
						controller.updateModeText("-- INSERT --")
					</script>
				</onentry>

				<transition event="esc_keypress" target="normal_mode">
					<script>
						controller.moveLeft()
					</script>
				</transition>

				<transition event="enter_keypress">
					<script>
						controller.writeNewLine()
					</script>
				</transition>

				<transition event="backspace_keypress">
					<script>
						controller.writeBackspace()
					</script>
				</transition>


				<!-- everything else -->
				<transition event="*" cond="_event.data.charCode">
					<script>
						controller.writeChar(_event.data.charCode)
					</script>
				</transition>
			</state>


			<state id="command_mode">
				<onentry>
					<script>
						controller.updateModeText("-- COMMAND --")
					</script>
				</onentry>

				<!-- printable characters: add to command buffer -->
				<!-- newline: run command -->
				
				<transition event="esc_keypress" target="normal_mode"/>
			</state>
		</state>
		<state id="dispatching_events" initial="main_dispatching_events">
			<state id="main_dispatching_events" initial="before_nonzero_digit">
				<transition event="bling_keypress" cond="In(visual_mode) || In(normal_mode)">
					<script>
						controller.moveToEndOfLine(updateSelection());
					</script>
				</transition>

				<transition event="backspace_keypress" cond="In(visual_mode) || In(normal_mode)">
					<script>
						controller.moveLeft(updateSelection());
					</script>
				</transition>

				<transition event="enter_keypress" cond="In(visual_mode) || In(normal_mode)">
					<script>
						controller.moveDown(updateSelection());
					</script>
				</transition>

				<transition event="w_keypress" cond="In(visual_mode) || In(normal_mode)">
					<script>
						controller.moveToStartOfNextWord(updateSelection());
					</script>
				</transition>

				<transition event="e_keypress" cond="In(visual_mode) || In(normal_mode)">
					<script>
						controller.moveToEndOfNextWord(updateSelection());
					</script>
				</transition>

				<transition event="b_keypress" cond="In(visual_mode) || In(normal_mode)">
					<script>
						controller.moveToStartOfPreviousWord(updateSelection());
					</script>
				</transition>

				<transition event="h_keypress" cond="In(visual_mode) || In(normal_mode)">
					<script>
						controller.moveLeft(updateSelection());
					</script>
				</transition>

				<transition event="l_keypress" cond="In(visual_mode) || In(normal_mode)">
					<script>
						controller.moveRight(false,updateSelection());
					</script>
				</transition>

				<transition event="k_keypress" cond="In(visual_mode) || In(normal_mode)">
					<script>
						controller.moveUp(updateSelection());
					</script>
				</transition>

				<transition event="j_keypress" cond="In(visual_mode) || In(normal_mode)">
					<script>
						controller.moveDown(updateSelection())
					</script>
				</transition>

				<!-- non-printable movement keys -->
				<transition event="left_keypress" 
					cond="In(insert_mode) || In(visual_or_select_mode) || In(normal_mode)">
					<script>
						controller.moveLeft(updateSelection());
					</script>
				</transition>
				<transition event="right_keypress"
					cond="In(insert_mode) || In(visual_or_select_mode) || In(normal_mode)">
					<script>
						controller.moveRight(false,updateSelection());
					</script>
				</transition>
				<transition event="up_keypress"
					cond="In(insert_mode) || In(visual_or_select_mode) || In(normal_mode)">
					<script>
						controller.moveUp(updateSelection());
					</script>
				</transition>
				<transition event="down_keypress"
					cond="In(insert_mode) || In(visual_or_select_mode) || In(normal_mode)">
					<script>
						controller.moveDown(updateSelection());
					</script>
				</transition>

				<transition event="g_keypress" target="after_g"/>

				<transition event="y_keypress" cond="In(visual_mode)">
					<script>
						controller.copySelectedTextIntoRegister();  
					</script>
					<send event="yank_executed" c:contentexpr="{}"/>
				</transition>

				<transition event="y_keypress" target="after_y" cond="In(normal_mode)"/>

				<state id="before_nonzero_digit">
					<transition event="zero_keypress" cond="In(visual_mode) || In(normal_mode)">
						<script>
							controller.moveToStartOfLine(updateSelection());
						</script>
					</transition>

					<transition event="*" target="after_nonzero_digit"
						cond="/[1-9]/.exec(String.fromCharCode(_event.data.charCode)) &amp;&amp; 
							(In(normal_mode) || In(visual_mode))">
						<assign location="repeatInput" 
							expr="repeatInput + String.fromCharCode(_event.data.charCode)"/>
					</transition>

				</state>

				<state id="after_nonzero_digit">
					<transition event="*" 
						cond="/\d/.exec(String.fromCharCode(_event.data.charCode)) &amp;&amp; 
							(In(normal_mode) || In(visual_mode))">
						<assign location="repeatInput" 
							expr="repeatInput + String.fromCharCode(_event.data.charCode)"/>
					</transition>
				</state>
				
			</state>

			<state id="completing_two_part_command" initial="after_g">
				<onexit>
					<script>
						<assign location="repeatInput" expr="''"/>
					</script>
				</onexit>

				<state id="after_g">
					<transition event="g_keypress" target="main_dispatching_events">
						<script>
							var parsedRepeatInput = parseInt(repeatInput);
							if(parsedRepeatInput){ 
								controller.moveCursorToLine(parsedRepeatInput-1);
							}else{
								controller.moveToFirstLineOfDocument();
							}
						</script>
					</transition>
				</state>

				<state id="after_y">
					<transition event="y_keypress" target="main_dispatching_events">
						<script>
							controller.yankCurrentLineIntoRegister();
						</script>
					</transition>
				</state>

				<!-- anything else, go back to main without executing anything -->
				<transition event="*" target="main_dispatching_events"/>
				
			</state>
		</state>
	</parallel>
</scxml>

