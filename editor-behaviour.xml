<!--
Copyright (C) 2011 Jacob Beard
Released under GNU GPL, read the file 'COPYING' for more information
-->

<scxml 
	xmlns="http://www.w3.org/2005/07/scxml" 
	xmlns:c="http://commons.apache.org/scxml-js"
	xmlns:vi="urn:vi"
	profile="ecmascript" 
	version="1.0" 
	name="viBehaviour" 
	initial="initial_default">

	<datamodel>
		<data id="controller"/>
		<data id="repeatInput" expr="0"/>
		<data id="registerName" />
		<data id="recordedMacroEventsMap" expr="{}"/>
		<data id="recordedMacroEventName"/>
		<data id="recordedMacroEventList"/>
	</datamodel>

	<script><![CDATA[
		function repeatCommand(fn,count){
			for(var i=0;i<count;i++){
				fn();
			}
		}

		function updateModeText(txt){
			if(In('recording_on')){
				controller.updateModeText(txt + " recording");
			}
			else{
				controller.updateModeText(txt);
			}
		}

	]]></script>

	<state id="initial_default">
		<transition event="init" target="main">
			<assign location="controller" expr="_event.data"/>	
		</transition>
	</state>

	<parallel id="main">

		<state id="in_mode" initial="normal_mode">

			<onentry>
				<script>	
					controller.unhideCursor();
					controller.hideCmdCursor();
				</script>
			</onentry>

			<state id="normal_mode">

				<onentry>
					<script>
						controller.makeCursorFat();
						updateModeText("-- NORMAL --");
					</script>
				</onentry>

				<transition event="P_keypress">
					<script>
						controller.putTextFromRegisterBeforeCursor(registerName);
						registerName = null;
					</script>
				</transition>

				<transition event="p_keypress">
					<script>
						controller.putTextFromRegisterAfterCursor(registerName);
						registerName = null;
					</script>
				</transition>

				<transition event="colon_keypress" target="command_mode"/>
					
				<transition event="v_keypress" target="visual_mode character_mode"/>
				<transition event="V_keypress" target="visual_mode line_mode"/>
				<transition event="ctrl_v_keypress" target="visual_mode block_mode"/>

				<!-- TODO: more checks like this -->
				<transition event="i_keypress" target="insert_mode"
					cond="!In('after_double_quote') &amp;&amp; !In('after_at') &amp;&amp; !In('after_q_keypress_selecting_register')"/>

				<transition event="a_keypress" target="insert_mode"
					cond="!In('after_double_quote') &amp;&amp; !In('after_at') &amp;&amp; !In('after_q_keypress_selecting_register')">
					<script>
						controller.moveRight(true);
					</script>
				</transition>

			</state>

			<parallel id="visual_and_select_modes">

                <datamodel>
                    <data id="selectText"/>
                    <data id="blockText"/>
                </datamodel>

				<onentry>
					<script>
						controller.makeCursorFat();
						controller.startSelection(); 
					</script>
				</onentry>

				<onexit>
					<script>
						controller.clearSelection(); 
					</script>
				</onexit>

				<transition event="esc_keypress" target="normal_mode"/>

				<state id="visual_or_select_mode" initial="visual_mode">

					<state id="select_mode">
						<onentry>
						    <assign location="selectText" expr="'SELECT'"/>
							<raise event="UPDATE_TEXT"/>
						</onentry>

						<transition event="ctrl_g_keypress" target="visual_mode" />

						<transition event="*" target="insert_mode"
							cond="_event.data.charCode !== 0">
							<script>
								controller.replaceSelectedTextIntoRegister(_event.data.charCode,registerName);  
								registerName = null;
							</script>
						</transition>

					</state>

					<state id="visual_mode">
						<onentry>
						    <assign location="selectText" expr="'VISUAL'"/>
							<raise event="UPDATE_TEXT"/>
						</onentry>

						<transition event="ctrl_g_keypress" target="select_mode" />

						<transition event="yank_executed" target="normal_mode" />

						<transition event="x_keypress" target="normal_mode">
							<script>
								controller.deleteSelectedTextIntoRegister(registerName);  
								registerName = null;
							</script>
						</transition>

						<transition event="d_keypress" target="normal_mode">
							<script>
								controller.deleteSelectedTextIntoRegister(registerName);  
								registerName = null;
							</script>
						</transition>

						<transition event="c_keypress" target="insert_mode">
							<script>
								controller.deleteSelectedTextIntoRegister(registerName);  
								registerName = null;
							</script>
						</transition>

					</state>
				</state>

				<state id="line_or_block_or_character_mode" initial="character_mode">
					<state id="line_mode">
						<onentry>
						    <assign location="blockText" expr="'LINE'"/>
							<script>
								controller.setSelectionMode(controller.SELECTION_MODE.LINE);
							</script>
							<raise event="UPDATE_TEXT"/>
						</onentry>

						<transition event="ctrl_v_keypress" target="block_mode"/>
						<transition event="v_keypress" target="character_mode"/>
					</state>

					<state id="block_mode">
						<onentry>
						    <assign location="blockText" expr="'BLOCK'"/>
							<script>
								controller.setSelectionMode(controller.SELECTION_MODE.BLOCK);
							</script>
							<raise event="UPDATE_TEXT"/>
						</onentry>

						<transition event="v_keypress" target="character_mode"/>
						<transition event="V_keypress" target="line_mode"/>
					</state>

					<state id="character_mode">
						<onentry>
						    <assign location="blockText" expr="'CHARACTER'"/>
							<script>
								controller.setSelectionMode(controller.SELECTION_MODE.CHARACTER);
							</script>
							<raise event="UPDATE_TEXT"/>
						</onentry>

						<transition event="ctrl_v_keypress" target="block_mode"/>
						<transition event="V_keypress" target="line_mode"/>
					</state>
				</state>

                <state id="updating-text">
                    <state id="now-updating-text">
                        <onentry>
                            <script>
                                updateModeText('-- ' + selectText + ' ' + blockText + ' --')
                            </script>
                        </onentry>
                        <transition target="now-updating-text" event="UPDATE_TEXT"/>
                    </state>
                </state>

			</parallel>


			<state id="insert_mode">
				<onentry>
					<script>
						controller.makeCursorThin()
						updateModeText("-- INSERT --")
					</script>
				</onentry>

				<transition event="esc_keypress" target="normal_mode">
					<script>
						controller.moveLeft()
					</script>
				</transition>

				<transition event="enter_keypress">
					<script>
						controller.writeNewLine()
					</script>
				</transition>

				<transition event="backspace_keypress">
					<script>
						controller.writeBackspace()
					</script>
				</transition>


				<!-- everything else -->
				<!-- TODO: move to dispatching events. for consistency -->
				<transition event="*" cond="_event.data.charCode">
					<script>
						controller.writeChar(_event.data.charCode)
					</script>
				</transition>
			</state>


			<state id="command_mode">
				<onentry>
					<script>
						controller.updateModeText("")

						controller.hideCursor();
						controller.unhideCmdCursor();

						controller.writeCmdChar(":");
					</script>
				</onentry>
				<onexit>
					<script>	
						controller.unhideCursor();
						controller.hideCmdCursor();
						controller.clearCmdLine();
					</script>
				</onexit>

				<!-- user-generated event triggered by cursor deleting last character -->
				<transition event="first_command_line_char_deleted" target="normal_mode"/>

				<transition event="command_executed" target="normal_mode"/>

				<transition event="esc_keypress" target="normal_mode"/>
			</state>
		</state>
		<state id="dispatching_events" initial="main_dispatching_events">
			<state id="main_dispatching_events" initial="before_nonzero_digit">
				<onentry>
					<assign location="repeatInput" expr="0"/>
				</onentry>

				<transition event="bling_keypress" target="main_dispatching_events"
					cond="In('visual_mode') || In('normal_mode')">
					<script>
						controller.moveToEndOfLine(In('visual_or_select_mode'));
					</script>
				</transition>

				<transition event="backspace_keypress" target="main_dispatching_events"
					 cond="In('visual_mode') || In('normal_mode')">
					<script>
						controller.moveLeft(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>

				<transition event="enter_keypress" target="main_dispatching_events"
					 cond="In('visual_mode') || In('normal_mode')">
					<script>
						controller.moveDown(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>

				<transition event="w_keypress" target="main_dispatching_events"
					 cond="In('visual_mode') || In('normal_mode')">
					<script>
						controller.moveToStartOfNextWord(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>

				<transition event="e_keypress" target="main_dispatching_events"
					 cond="In('visual_mode') || In('normal_mode')">
					<script>
						controller.moveToEndOfNextWord(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>

				<transition event="b_keypress" target="main_dispatching_events"
					 cond="In('visual_mode') || In('normal_mode')">
					<script>
						controller.moveToStartOfPreviousWord(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>

				<transition event="h_keypress" target="main_dispatching_events"
					 cond="In('visual_mode') || In('normal_mode')">
					<script>
						controller.moveLeft(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>

				<transition event="l_keypress" target="main_dispatching_events"
					 cond="In('visual_mode') || In('normal_mode')">
					<script>
						controller.moveRight(false,In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>

				<transition event="k_keypress" target="main_dispatching_events"
					 cond="In('visual_mode') || In('normal_mode')">
					<script>
						controller.moveUp(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>

				<transition event="j_keypress" target="main_dispatching_events"
					 cond="In('visual_mode') || In('normal_mode')">
					<script>
						controller.moveDown(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>

				<!-- non-printable movement keys -->
				<transition event="left_keypress" target="main_dispatching_events" 
					cond="In('insert_mode') || In('visual_or_select_mode') || In('normal_mode')">
					<script>
						controller.moveLeft(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>
				<transition event="right_keypress" target="main_dispatching_events"	
					cond="In('insert_mode') || In('visual_or_select_mode') || In('normal_mode')">
					<script>
						controller.moveRight(false,In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>
				<transition event="up_keypress" target="main_dispatching_events"	
					cond="In('insert_mode') || In('visual_or_select_mode') || In('normal_mode')">
					<script>
						controller.moveUp(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>
				<transition event="down_keypress" target="main_dispatching_events"
					cond="In('insert_mode') || In('visual_or_select_mode') || In('normal_mode')">
					<script>
						controller.moveDown(In('visual_or_select_mode'),repeatInput);
					</script>
				</transition>


				<!-- command mode stuff -->
				<transition event="left_keypress" cond="In('command_mode')">
					<script>
						controller.moveCmdLeft();
					</script>
				</transition>
				<transition event="right_keypress" cond="In('command_mode')">
					<script>
						controller.moveCmdRight();
					</script>
				</transition>
				<transition event="backspace_keypress" cond="In('command_mode')">
					<script>
						controller.writeCmdBackspace();
					</script>
				</transition>

				<transition event="enter_keypress" cond="In('command_mode')">
					<script>
						controller.executeCommand();
					</script>
					<send event="command_executed" c:contentexpr="{}"/>
				</transition>

				<transition event="*" cond="In('command_mode') &amp;&amp; _event.data.charCode">
					<script>
						controller.writeCmdChar(_event.data.charCode)
					</script>
				</transition>

				<transition event="at_keypress" cond="In('normal_mode')" target="after_at"/>

				<transition event="g_keypress" target="after_g"/>

				<!-- FIXME: we can move this back over -->
				<transition event="y_keypress" cond="In('visual_mode')">
					<script>
						controller.copySelectedTextIntoRegister(registerName); 
						registerName = null;
					</script>
					<send event="yank_executed" c:contentexpr="{}"/>
				</transition>

				<transition event="y_keypress" target="after_y" cond="In('normal_mode')"/>

				<transition event="d_keypress" target="after_d" cond="In('normal_mode')"/>

				<transition event="double_quote_keypress" target="after_double_quote" cond="In('normal_mode') || In('visual_mode')"/>

				<state id="before_nonzero_digit">
					<transition event="zero_keypress" cond="In('visual_mode') || In('normal_mode')">
						<script>
							controller.moveToStartOfLine(In('visual_or_select_mode'));
						</script>
					</transition>

					<transition event="*" target="after_nonzero_digit"
						cond="/[1-9]/.exec(String.fromCharCode(_event.data.charCode)) &amp;&amp; 
							(In('normal_mode') || In('visual_mode'))">
						<assign location="repeatInput" 
							expr="parseInt(repeatInput + String.fromCharCode(_event.data.charCode))"/>
					</transition>

				</state>

				<state id="after_nonzero_digit">
					<transition event="*" 
						cond="/\d/.exec(String.fromCharCode(_event.data.charCode)) &amp;&amp; 
							(In('normal_mode') || In('visual_mode'))">
						<assign location="repeatInput" 
							expr="parseInt(repeatInput + String.fromCharCode(_event.data.charCode))"/>
					</transition>
				</state>
				
			</state>

			<state id="completing_two_part_command" initial="after_g">
				<onexit>
                    <assign location="repeatInput" expr="0"/>
				</onexit>

				<state id="after_double_quote">
					<transition event="*" target="main_dispatching_events"
						cond="_event.data.charCode">
						<assign location="registerName" expr="String.fromCharCode(_event.data.charCode)"/>
					</transition>

				</state>

				<state id="after_g">
					<transition event="g_keypress" target="main_dispatching_events">
						<script>
							if(repeatInput){ 
								controller.moveCursorToLine(repeatInput-1);
							}else{
								controller.moveToFirstLineOfDocument();
							}
						</script>
					</transition>
				</state>

				<state id="after_y">
					<transition event="y_keypress" target="main_dispatching_events">
						<script>
							controller.yankCurrentLineIntoRegister(registerName);
							registerName = null;
						</script>
					</transition>
				</state>

				<state id="after_d">
					<transition event="d_keypress" target="main_dispatching_events">
						<script>
							controller.deleteCurrentLineIntoRegister(registerName);
							registerName = null;
						</script>
					</transition>
				</state>

				<state id="after_at">
					<transition event="*" cond="_event.data.charCode" target="main_dispatching_events">
						<script>
							var eventsList = recordedMacroEventsMap[String.fromCharCode(_event.data.charCode)];
							eventsList.forEach(function(e){
								innerEventQueue.push(e.name,e.data,false);	//send event. FIXME: inner or outer queue?
							});
						</script>
					</transition>
				</state>

				<!-- anything else, go back to main without executing anything -->
				<transition event="*" target="main_dispatching_events"/>
				
			</state>
		</state>

		<state id="recording_macro" initial="recording_off">
			<state id="recording_off" initial="before_q_keypress">
				<state id="before_q_keypress">
					<transition event="q_keypress" cond="In('normal_mode')" target="after_q_keypress_selecting_register"/>
				</state>
		
				<state id="after_q_keypress_selecting_register">
					<transition event="*" cond="_event.data.charCode" target="recording_on">
						<script>
							recordedMacroEventName = String.fromCharCode(_event.data.charCode);

							//reset register
							recordedMacroEventList = [];
							recordedMacroEventsMap[recordedMacroEventName] = recordedMacroEventList; 
						</script>
					</transition>
				</state>
			</state>

			<state id="recording_on">
				<onentry>
					<script>
						controller.appendToModeText(" recording"); 
					</script>
				</onentry>
				<onexit>
					<script>
						controller.removeStringFromModeText(" recording"); 
					</script>
				</onexit>

				<transition event="q_keypress" cond="In('normal_mode')" target="recording_off"/>

				<transition event="*">
					<script>
						recordedMacroEventList.push(Object.create(_event));
					</script>
				</transition>
			</state>
			
		</state>
	</parallel>
</scxml>

